/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import game_engine.TournamentDriver;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileSystemView;
import map.mapprocessor.InvalidMapException;
import map.mapprocessor.MapParser;
import map.mapprocessor.MapValidator;
import models.GameMap;

/**
 * Tournament window of the Game
 * @author daksh
 */
public class Tournament_Window extends javax.swing.JFrame {

    /**
     * Creates new form Tournament_Window
     */
    public Tournament_Window() {
        initComponents();
        makeInvisible();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        numberOfMapsSpinner = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        jLabel2 = new javax.swing.JLabel();
        numberOfGamesSpinner = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        jLabel3 = new javax.swing.JLabel();
        aggresivePlayer = new javax.swing.JCheckBox();
        benevolentPlayer = new javax.swing.JCheckBox();
        cheatingPlayer = new javax.swing.JCheckBox();
        randomPlayer = new javax.swing.JCheckBox();
        ml1 = new javax.swing.JLabel();
        ml2 = new javax.swing.JLabel();
        ml3 = new javax.swing.JLabel();
        ml4 = new javax.swing.JLabel();
        ml5 = new javax.swing.JLabel();
        map1Path = new javax.swing.JTextField();
        map2Path = new javax.swing.JTextField();
        map3Path = new javax.swing.JTextField();
        map4Path = new javax.swing.JTextField();
        map5Path = new javax.swing.JTextField();
        browse1 = new javax.swing.JButton();
        browse2 = new javax.swing.JButton();
        browse3 = new javax.swing.JButton();
        browse4 = new javax.swing.JButton();
        browse5 = new javax.swing.JButton();
        startTournamentButton = new javax.swing.JButton();
        drawTurnSpinner = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(30, 10, 50, 1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Maps : ");

        numberOfMapsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberOfMapsSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText("Games to be played in each Map :");

        jLabel3.setText("Draw turn : ");

        aggresivePlayer.setText("AGGRESIVE");
        aggresivePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggresivePlayerActionPerformed(evt);
            }
        });

        benevolentPlayer.setText("BENEVOLENT");
        benevolentPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benevolentPlayerActionPerformed(evt);
            }
        });

        cheatingPlayer.setText("CHEATING");

        randomPlayer.setText("RANDOM");

        ml1.setText("Map 1 :");

        ml2.setText("Map 2 :");

        ml3.setText("Map 3 :");

        ml4.setText("Map 4 :");

        ml5.setText("Map 5 :");

        map1Path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                map1PathActionPerformed(evt);
            }
        });

        browse1.setText("Browse");
        browse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse1ActionPerformed(evt);
            }
        });

        browse2.setText("Browse");
        browse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse2ActionPerformed(evt);
            }
        });

        browse3.setText("Browse");
        browse3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse3ActionPerformed(evt);
            }
        });

        browse4.setText("Browse");
        browse4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse4ActionPerformed(evt);
            }
        });

        browse5.setText("Browse");
        browse5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse5ActionPerformed(evt);
            }
        });

        startTournamentButton.setText("Start Tournament");
        startTournamentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTournamentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(numberOfMapsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(36, 36, 36)
                                .addComponent(drawTurnSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(numberOfGamesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(aggresivePlayer)
                                    .addComponent(cheatingPlayer))
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(randomPlayer)
                                    .addComponent(benevolentPlayer)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ml5)
                                        .addGap(18, 18, 18)
                                        .addComponent(map5Path))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(ml4)
                                        .addGap(18, 18, 18)
                                        .addComponent(map4Path))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ml3)
                                        .addGap(18, 18, 18)
                                        .addComponent(map3Path))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ml2)
                                        .addGap(18, 18, 18)
                                        .addComponent(map2Path))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ml1)
                                        .addGap(18, 18, 18)
                                        .addComponent(map1Path, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browse1)
                                    .addComponent(browse2)
                                    .addComponent(browse3)
                                    .addComponent(browse4)
                                    .addComponent(browse5)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(startTournamentButton)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numberOfGamesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(drawTurnSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aggresivePlayer)
                    .addComponent(benevolentPlayer))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cheatingPlayer)
                    .addComponent(randomPlayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberOfMapsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ml1)
                    .addComponent(map1Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ml2)
                    .addComponent(map2Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ml3)
                    .addComponent(map3Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ml4)
                    .addComponent(map4Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ml5)
                    .addComponent(map5Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse5))
                .addGap(18, 18, 18)
                .addComponent(startTournamentButton)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aggresivePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggresivePlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aggresivePlayerActionPerformed

    private void benevolentPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benevolentPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_benevolentPlayerActionPerformed

    private void browse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse1ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String mapPath = selectedFile.getAbsolutePath();
            map1Path.setText(mapPath);
            System.out.println(mapPath);
        }
    }//GEN-LAST:event_browse1ActionPerformed

    private void browse3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse3ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String mapPath = selectedFile.getAbsolutePath();
            map3Path.setText(mapPath);
            System.out.println(mapPath);
        }
    }//GEN-LAST:event_browse3ActionPerformed

    private void map1PathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_map1PathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_map1PathActionPerformed

    private void numberOfMapsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberOfMapsSpinnerStateChanged
        // TODO add your handling code here:
        int noOfMaps = (Integer) numberOfMapsSpinner.getValue();
        jl[0] = ml1;
        jl[1] = ml2;
        jl[2] = ml3;
        jl[3] = ml4;
        jl[4] = ml5;

        jb[0] = browse1;
        jb[1] = browse2;
        jb[2] = browse3;
        jb[3] = browse4;
        jb[4] = browse5;

        jtf[0] = map1Path;
        jtf[1] = map2Path;
        jtf[2] = map3Path;
        jtf[3] = map4Path;
        jtf[4] = map5Path;

        for (int i = 0; i < 5; i++) {
            jl[i].setVisible(false);
            jb[i].setVisible(false);
            jtf[i].setVisible(false);
        }
        for (int i = 0; i < noOfMaps; i++) {
            jl[i].setVisible(true);
            jb[i].setVisible(true);
            jtf[i].setVisible(true);
        }
    }//GEN-LAST:event_numberOfMapsSpinnerStateChanged

    private void startTournamentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTournamentButtonActionPerformed
        // TODO add your handling code here:

        if (!isMapFilesEmpty()) {
            int numberOfGames = (Integer) numberOfGamesSpinner.getValue();
            int drawTurn = (Integer) drawTurnSpinner.getValue();
            int numberOfMaps = (Integer) numberOfMapsSpinner.getValue();
            String mapPaths[] = new String[numberOfMaps];
            int strategy[] = new int[4];
            strategy[0] = aggresivePlayer.isSelected() ? 1 : 0;
            strategy[1] = benevolentPlayer.isSelected() ? 1 : 0;
            strategy[2] = cheatingPlayer.isSelected() ? 1 : 0;
            strategy[3] = randomPlayer.isSelected() ? 1 : 0;
            for (int i = 0; i < numberOfMaps; i++) {
                mapPaths[i] = (String) jtf[i].getText();
            }

            TournamentDriver td = new TournamentDriver(numberOfGames, drawTurn, numberOfMaps, mapPaths, strategy);
            try {
                td.startTournament();
            } catch (InterruptedException ex) {
                Logger.getLogger(Tournament_Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }
    }//GEN-LAST:event_startTournamentButtonActionPerformed

    private void browse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse2ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String mapPath = selectedFile.getAbsolutePath();
            map2Path.setText(mapPath);
            System.out.println(mapPath);
        }
    }//GEN-LAST:event_browse2ActionPerformed

    private void browse4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse4ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String mapPath = selectedFile.getAbsolutePath();
            map4Path.setText(mapPath);
            System.out.println(mapPath);
        }
    }//GEN-LAST:event_browse4ActionPerformed

    private void browse5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse5ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String mapPath = selectedFile.getAbsolutePath();
            map5Path.setText(mapPath);
            System.out.println(mapPath);
        }
    }//GEN-LAST:event_browse5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tournament_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tournament_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tournament_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tournament_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tournament_Window().setVisible(true);
            }
        });
    }

    JLabel[] jl = new JLabel[5];
    JButton[] jb = new JButton[5];
    JTextField[] jtf = new JTextField[5];

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aggresivePlayer;
    private javax.swing.JCheckBox benevolentPlayer;
    private javax.swing.JButton browse1;
    private javax.swing.JButton browse2;
    private javax.swing.JButton browse3;
    private javax.swing.JButton browse4;
    private javax.swing.JButton browse5;
    private javax.swing.JCheckBox cheatingPlayer;
    private javax.swing.JSpinner drawTurnSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField map1Path;
    private javax.swing.JTextField map2Path;
    private javax.swing.JTextField map3Path;
    private javax.swing.JTextField map4Path;
    private javax.swing.JTextField map5Path;
    private javax.swing.JLabel ml1;
    private javax.swing.JLabel ml2;
    private javax.swing.JLabel ml3;
    private javax.swing.JLabel ml4;
    private javax.swing.JLabel ml5;
    private javax.swing.JSpinner numberOfGamesSpinner;
    private javax.swing.JSpinner numberOfMapsSpinner;
    private javax.swing.JCheckBox randomPlayer;
    private javax.swing.JButton startTournamentButton;
    // End of variables declaration//GEN-END:variables

    private void makeInvisible() {
        int noOfMaps = (Integer) numberOfMapsSpinner.getValue();
        jl[0] = ml1;
        jl[1] = ml2;
        jl[2] = ml3;
        jl[3] = ml4;
        jl[4] = ml5;

        jb[0] = browse1;
        jb[1] = browse2;
        jb[2] = browse3;
        jb[3] = browse4;
        jb[4] = browse5;

        jtf[0] = map1Path;
        jtf[1] = map2Path;
        jtf[2] = map3Path;
        jtf[3] = map4Path;
        jtf[4] = map5Path;

        for (int i = noOfMaps; i < 5; i++) {
            jl[i].setVisible(false);
            jb[i].setVisible(false);
            jtf[i].setVisible(false);

        }

    }

    /**
     * Checks whether the map file is empty or not
     * @return true if valid and false if invalid
     */
    private boolean isMapFilesEmpty() {
        int nubmerOfMaps = (Integer) numberOfMapsSpinner.getValue();
        for (int i = 0; i < nubmerOfMaps; i++) {
            String tempMapPath = jtf[i].getText();
            if (!checkMapPath(tempMapPath)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Checks the map path
     * @param mapPath path of map file
     * @return true if valid and false if invalid
     */
    boolean checkMapPath(String mapPath) {
        if (mapPath.length() == 0) {
            JOptionPane.showMessageDialog(null, "Please Select Map");
            return false;
        } else {

            String p[] = mapPath.split("\\\\");
            String fileName = p[p.length - 1];
            String e[] = fileName.split("\\.");
            if (e[1].equals("map")) {
                boolean reply;
                try {
                    GameMap m = MapParser.parseMap(mapPath);
                    reply = MapValidator.verifyMap(m);
                    
                } catch (InvalidMapException ex) {
                    System.out.println(ex.getMessage());
                    reply = false;
                }
                if (reply) {
                    return true;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Map!");
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Not a file");
                return false;
            }
        }
    }
}
