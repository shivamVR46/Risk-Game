/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import models.GameBoard;
import utilities.Country;

/**
 * This class contains the View of the GameBoard
 *
 * @author daksh
 */
public class GameBoardView extends javax.swing.JFrame implements Observer {

    /**
     * Column with Country Information
     */
    String countryInformationTableColumn[] = {"Country Name ", "Continent Name", "Owner", "Armies"};
    /**
     * Column with Player Information
     */
    String playerInformationTableColumn[] = {"Player Name", "Map % owned", "Total Armies", "No of RiskCards"};
    /**
     * Column with Continents of the player
     */
    String continentPlayerTableColumn[] = {"Player Name", "Continents"};

    /**
     * Creates new form GameBoardView1
     */
    public GameBoardView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        countryInformationTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        playerInformationTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        continentInformationTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        countryInformationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(countryInformationTable);

        playerInformationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(playerInformationTable);

        continentInformationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(continentInformationTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Shows the GameBoard View
     *
     * @param gameBoardView {@link #GameBoardView() }
     */
    public void showView(GameBoardView gameBoardView) {
        //     this.setVisible(true);

        try {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    gameBoardView.setVisible(true);
                }
            });
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable continentInformationTable;
    private javax.swing.JTable countryInformationTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable playerInformationTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Update method of the GameBoard View
     *
     * @param o Observable object
     * @param arg Object of observable i.e GameBoard
     */
    @Override
    public void update(Observable o, Object arg) {

        GameBoard gameBoard = (GameBoard) o;
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                updateTables(gameBoard);
            }
        });

    }

    /**
     * Updates the Tables namely Country,Player and Continent Information i
     *
     * @param gameBoard Object of the GameBoard {@link models.GameBoard}
     */
    private void updateTables(GameBoard gameBoard) {
        updateCountryInformationTable(gameBoard);
        updatePlayerInformationTable(gameBoard);
        updatecontinentPlayerTable(gameBoard);

    }

    /**
     * Updates the Country Information table
     *
     * @param gameBoard Object of the GameBoard {@link models.GameBoard}
     */
    private void updateCountryInformationTable(GameBoard gameBoard) {
        ArrayList<String> countryList = gameBoard.getMap().getNameOfCountries();
        int rows = countryList.size();
        int columns = 4;
        String countryData[][] = new String[rows][columns];
        for (int i = 0; i < countryList.size(); i++) {

            String countryName = countryList.get(i);
            String continentName = gameBoard.getMap().getContinentFromCountry(countryName);
            String countryOwner;
            String countryArmies;
            try {
                Country country = gameBoard.getCountryDetails(countryName);
                countryOwner = country.getPlayerName();
                countryArmies = Integer.toString(country.getAmries());
                countryData[i][0] = countryName;
                countryData[i][1] = continentName;
                countryData[i][2] = countryOwner;
                countryData[i][3] = countryArmies;
            } catch (Exception e) {
                System.out.println(e);
            }

        }
        try {
            DefaultTableModel dm;
            dm = new javax.swing.table.DefaultTableModel(countryData, countryInformationTableColumn);
            countryInformationTable.setModel(dm);
        } catch (Exception e) {
            System.out.println("occured in countryinformation");
        }
    }

    /**
     * Updates the Player Information table
     *
     * @param gameBoard Object of the GameBoard {@link models.GameBoard}
     */
    private void updatePlayerInformationTable(GameBoard gameBoard) {

        String playerInformationData[][] = new String[gameBoard.getNumberOfPlayers()][4];
        int i = 0;
        for (String pName : gameBoard.getPlayerCountries().keySet()) {

            String playerName = pName;
            String percentage = Float.toString((float) gameBoard.getPlayerMapPercentage().get(playerName));// == null; ? Float.toString(0):Float.toString((float) gameBoard.getPlayerMapPercentage().get(playerName));
            String armies = Integer.toString(gameBoard.getPlayerArmies().get(playerName));
            String numberOfRiskCards = Integer.toString(gameBoard.getPlayerRiskCards().get(playerName));

            playerInformationData[i][0] = playerName;
            playerInformationData[i][1] = percentage;
            playerInformationData[i][2] = armies;
            playerInformationData[i][3] = numberOfRiskCards;

            i++;
        }
        try {
            DefaultTableModel dm;
            dm = new javax.swing.table.DefaultTableModel(playerInformationData, playerInformationTableColumn);
            playerInformationTable.setModel(dm);
        } catch (Exception e) {
            System.out.println("occured in playerInformation table");
        }
    }

    /**
     * Updates the Continents of the player information table
     *
     * @param gameBoard Object of the GameBoard {@link models.GameBoard}
     */
    private void updatecontinentPlayerTable(GameBoard gameBoard) {
        String continentPlayerData[][] = new String[gameBoard.getNumberOfPlayers()][2];
        int i = 0;
        for (String playerName : gameBoard.getPlayerContinents().keySet()) {
            ArrayList<String> tempList = gameBoard.getPlayerContinents().get(playerName);
            String continentList = tempList != null ? tempList.toString() : "";

            continentPlayerData[i][0] = playerName;
            continentPlayerData[i][1] = continentList;

            i++;
        }
        try {
            DefaultTableModel dm;
            dm = new javax.swing.table.DefaultTableModel(continentPlayerData, continentPlayerTableColumn);
            continentInformationTable.setModel(dm);
        } catch (Exception e) {
            System.out.println("exception occured in continentplayertable");
        }
    }
}
